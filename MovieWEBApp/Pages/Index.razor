@using System.Collections.Generic;
@using Microsoft.Extensions.Configuration
@using System.Net.Http
@using Models;

@inject IConfiguration Config
@page "/"

<style>
    body {
        background-color: darkslateblue
    }

    input[type="text"], textarea {
        background-color: #d1d1d1;
    }

    div[type="div"], textarea {
        background-color: #703D8B;
    }

    h1[type="textH1"], text {
        color: aliceblue;
    }

    h5[type="textH5"], text {
        color: aliceblue;
    }

    p[type="textP"], text {
        color: aliceblue;
    }

    img {
        background-color: #703D8B;
    }
</style>

<body>
    <h1 type="textH1" class="text-center">Movie Search</h1>

    <div class="text-center">
        <div class="p-2">
            <input type="text" class="form-control form-control-lg w-50 mx-auto mt-4" placeholder="Movie name" @bind-value="searchMovie" /><br>
        </div>
        <div class="p-2">
            <button class="btn btn-primary btn-lg" @onclick="HandleSearch">Search the Movie API</button>
        </div>
    </div>

    <br>
    <br>
    <br>
    @if (resultMovie != null)
    {
        <div align="center" class="container">
            <div style="margin-bottom: 40px" class="col col-lg-4">
                <div class="card h-100">
                    <img src="@resultMovie.ImageOfMovie"
                         class="card-img-top"
                         style="object-fit:contain; height: 300px">
                    <div type="div" class="card-body">
                        <h5 type="textH5" class="card-title">@resultMovie.NameOfMovie</h5>
                        <p type="textP" class="card-text" align="left">
                            ID:  @resultMovie.IDOfMovie<br>
                            Language:  @resultMovie.LanguageOfMovie<br>
                            Rating:  @resultMovie.RatingOfMovie <br>
                        <p></p>
                        Actors:
                        @if (resultMovie.movieActorOfMovie != null && !isHide)
                        {
                            <ul>
                                @foreach (var actor in resultMovie.movieActorOfMovie)
                                {
                                    <li>@actor</li>
                                }
                            </ul>
                        }
                        Directors:
                        @if (resultMovie.movieDirectorOfMovie != null && !isHide)
                        {
                            <ul>
                                @foreach (var director in resultMovie.movieDirectorOfMovie)
                                {
                                    <li>@director</li>
                                }
                            </ul>
                        }
                        Tags:
                        @if (resultMovie.movieTagOfMovie != null && !isHide)
                        {
                            <ul>
                                @foreach (var tag in resultMovie.movieTagOfMovie)
                                {
                                    <li>@tag</li>
                                }
                            </ul>
                        }
                        </p>
                    </div>
                    <button class="btn btn-primary btn-lg" @onclick="ShowCard">Show/Hide</button>
                </div>
            </div>
            @if (SimilarsMovies != null)
            {
                <h1 type="textH1" class="text-center">Featured Movies</h1><br>
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3">
                    @foreach (var simMovie in SimilarsMovies)
                    {
                        <div style="margin-bottom: 40px" class="col col-lg-4">
                            <div class="card h-100">
                                <img src="@simMovie.ImageOfMovie"
                                     class="card-img-top"
                                     style="object-fit: contain; height: 300px">
                                <div type="div" class="card-body">
                                    <h5 type="textH5" class="card-title">@simMovie.NameOfMovie</h5>
                                    <p type="textP" class="card-text" align="left">
                                        ID:  @simMovie.IDOfMovie<br>
                                        Language:  @simMovie.LanguageOfMovie<br>
                                        Rating:  @simMovie.RatingOfMovie<br>
                                    <p></p>
                                    Actors:
                                    @if (simMovie.movieActorOfMovie != null && !isHide)
                                    {
                                        <ul>
                                            @foreach (var actor in simMovie.movieActorOfMovie)
                                            {
                                                <li>@actor</li>
                                            }
                                        </ul>
                                    }
                                    Directors:
                                    @if (simMovie.movieDirectorOfMovie != null && !isHide)
                                    {
                                        <ul>
                                            @foreach (var director in simMovie.movieDirectorOfMovie)
                                            {
                                                <li>@director</li>
                                            }
                                        </ul>
                                    }
                                    Tags:
                                    @if (simMovie.movieTagOfMovie != null && !isHide)
                                    {
                                        <ul>
                                            @foreach (var tag in simMovie.movieTagOfMovie)
                                            {
                                                <li>@tag</li>
                                            }
                                        </ul>
                                    }
                                    </p>
                                </div>
                                <button class="btn btn-primary btn-lg" @onclick="ShowCard">Show/Hide</button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }


    @code
{
        private string searchMovie;
        private string Name;
        private string ID;
        private string Language;
        private string Rating;
        private string Image;
        private bool isHide = true;
        private static List<String> movieActor;
        private static List<String> movieDirector;
        private static List<String> movieTag;
        private MovieModels.Movie movie;
        private static List<SimilarMovieClass> SimilarsMovies;
        private static bool isSimilar = false;

        private List<string> ListOfSimilarMovieID;

        private SimilarMovieClass similarMovie;
        private SimilarMovieClass resultMovie;

        private async Task ShowCard()
        {
            if (isHide)
            {
                isHide = false;
            }
            else
            {
                isHide = true;
            }
        }

        private async Task GetMovie(string nameOfSeacrhMovie)
        {
            movie = null;
            Image = "https://i.pinimg.com/originals/10/b2/f6/10b2f6d95195994fca386842dae53bb2.png";
            movieActor = new List<string>();
            movieDirector = new List<string>();
            movieTag = new List<string>();
            using (var context = new MovieModels.MyMovieDBContext())
            {
                movie = context.Movies.FirstOrDefault(Index => Index.Title == nameOfSeacrhMovie || Index.MovieId == nameOfSeacrhMovie);
                if (!isSimilar)
                {
                    movie.SimilarMovies = context.SimilarMovies.Where(similar => similar.SimilarMovies == movie.MovieId).ToList();
                    foreach (var sim in movie.SimilarMovies)
                    {
                        ListOfSimilarMovieID.Add(sim.MovieId);
                    }
                }
                var tagID = context.MovieTags.Where(tag => tag.MoviesMovieId == movie.MovieId).ToList();
                foreach (var tags in tagID)
                {
                    movieTag.Add(context.Tags.Find(tags.TagsTagId).Name);
                }
                if (movieTag.Count > 0)
                {
                    Console.WriteLine("HI");
                }
                var actorID = context.MovieStaffs.Where(actor => actor.IsActorMovieId == movie.MovieId).ToList();
                foreach (var actor in actorID)
                {
                    movieActor.Add(context.Staffs.Find(actor.ActorsStaffId).FullName);
                }
                var directorID = context.MovieStaff1s.Where(director => director.IsDirectorMovieId == movie.MovieId).ToList();
                foreach (var director in directorID)
                {
                    movieDirector.Add(context.Staffs.Find(director.DirectorsStaffId).FullName);
                }
                var client = new HttpClient();
                var request = new HttpRequestMessage
                {
                    Method = HttpMethod.Get,
                    RequestUri = new Uri($"https://imdb8.p.rapidapi.com/title/auto-complete?q={movie.MovieId}"),
                    Headers =
    {
        { "x-rapidapi-key", "8430fdb3e0mshd07b70e9c0d04d1p13a0f6jsn016e6b2dc087" },
        { "x-rapidapi-host", "imdb8.p.rapidapi.com" },
    },
                };
                using (var response = await client.SendAsync(request))
                {

                    var body = await response.Content.ReadAsStringAsync();
                    try
                    {
                        int startIndex = body.IndexOf("https");
                        int endIndex = body.IndexOf("width", startIndex);
                        Image = body.Substring(startIndex, (endIndex - startIndex) - 3);
                    }
                    catch
                    {
                        Image = "https://www.p-etalon.ru/global/images/prod/nophoto.png";
                    }
                }
                similarMovie = new SimilarMovieClass(movie.Title, movie.MovieId, movie.Language, movie.AverageRating.ToString(), Image, movieActor, movieDirector, movieTag);
                if (isSimilar)
                {
                    SimilarsMovies.Add(similarMovie);
                }
                else
                {
                    resultMovie = similarMovie;
                }
            }
        }

        private async Task HandleSearch()
        {
            resultMovie = null;
            similarMovie = null;
            SimilarsMovies = new List<SimilarMovieClass>();
            ListOfSimilarMovieID = new List<string>();
            isSimilar = false;
            if (searchMovie == null)
            {
                return;
            }
            await GetMovie(searchMovie);
            isSimilar = true;
            foreach (var movie in ListOfSimilarMovieID)
            {
                await GetMovie(movie);
            }
        }
    }
</body>